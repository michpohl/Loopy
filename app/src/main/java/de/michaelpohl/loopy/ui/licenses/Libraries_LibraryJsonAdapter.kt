// Code generated by moshi-kotlin-codegen. Do not edit.
package de.michaelpohl.loopy.ui.licenses

import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import com.squareup.moshi.internal.Util
import java.lang.NullPointerException
import java.lang.reflect.Constructor
import kotlin.Int
import kotlin.String
import kotlin.Suppress
import kotlin.collections.emptySet
import kotlin.jvm.Volatile
import kotlin.text.buildString

@Suppress("DEPRECATION", "unused", "ClassName", "REDUNDANT_PROJECTION")
class Libraries_LibraryJsonAdapter(
  moshi: Moshi
) : JsonAdapter<Libraries.Library>() {
  private val options: JsonReader.Options = JsonReader.Options.of("artifactId", "copyrightHolder",
      "copyrightStatement", "license", "licenseUrl", "normalizedLicense", "url", "libraryName")

  private val nullableArtifactIdAdapter: JsonAdapter<Libraries.Library.ArtifactId?> =
      moshi.adapter(Libraries.Library.ArtifactId::class.java, emptySet(), "artifactId")

  private val nullableStringAdapter: JsonAdapter<String?> = moshi.adapter(String::class.java,
      emptySet(), "copyrightHolder")

  @Volatile
  private var constructorRef: Constructor<Libraries.Library>? = null

  override fun toString(): String = buildString(39) {
      append("GeneratedJsonAdapter(").append("Libraries.Library").append(')') }

  override fun fromJson(reader: JsonReader): Libraries.Library {
    var artifactId: Libraries.Library.ArtifactId? = null
    var copyrightHolder: String? = null
    var copyrightStatement: String? = null
    var license: String? = null
    var licenseUrl: String? = null
    var normalizedLicense: String? = null
    var url: String? = null
    var libraryName: String? = null
    var mask0 = -1
    reader.beginObject()
    while (reader.hasNext()) {
      when (reader.selectName(options)) {
        0 -> {
          artifactId = nullableArtifactIdAdapter.fromJson(reader)
          // $mask = $mask and (1 shl 0).inv()
          mask0 = mask0 and 0xfffffffe.toInt()
        }
        1 -> {
          copyrightHolder = nullableStringAdapter.fromJson(reader)
          // $mask = $mask and (1 shl 1).inv()
          mask0 = mask0 and 0xfffffffd.toInt()
        }
        2 -> {
          copyrightStatement = nullableStringAdapter.fromJson(reader)
          // $mask = $mask and (1 shl 2).inv()
          mask0 = mask0 and 0xfffffffb.toInt()
        }
        3 -> {
          license = nullableStringAdapter.fromJson(reader)
          // $mask = $mask and (1 shl 3).inv()
          mask0 = mask0 and 0xfffffff7.toInt()
        }
        4 -> {
          licenseUrl = nullableStringAdapter.fromJson(reader)
          // $mask = $mask and (1 shl 4).inv()
          mask0 = mask0 and 0xffffffef.toInt()
        }
        5 -> {
          normalizedLicense = nullableStringAdapter.fromJson(reader)
          // $mask = $mask and (1 shl 5).inv()
          mask0 = mask0 and 0xffffffdf.toInt()
        }
        6 -> {
          url = nullableStringAdapter.fromJson(reader)
          // $mask = $mask and (1 shl 6).inv()
          mask0 = mask0 and 0xffffffbf.toInt()
        }
        7 -> {
          libraryName = nullableStringAdapter.fromJson(reader)
          // $mask = $mask and (1 shl 7).inv()
          mask0 = mask0 and 0xffffff7f.toInt()
        }
        -1 -> {
          // Unknown name, skip it.
          reader.skipName()
          reader.skipValue()
        }
      }
    }
    reader.endObject()
    @Suppress("UNCHECKED_CAST")
    val localConstructor: Constructor<Libraries.Library> = this.constructorRef ?:
        Libraries.Library::class.java.getDeclaredConstructor(Libraries.Library.ArtifactId::class.java,
        String::class.java, String::class.java, String::class.java, String::class.java,
        String::class.java, String::class.java, String::class.java, Int::class.javaPrimitiveType,
        Util.DEFAULT_CONSTRUCTOR_MARKER).also { this.constructorRef = it }
    return localConstructor.newInstance(
        artifactId,
        copyrightHolder,
        copyrightStatement,
        license,
        licenseUrl,
        normalizedLicense,
        url,
        libraryName,
        mask0,
        null
    )
  }

  override fun toJson(writer: JsonWriter, value: Libraries.Library?) {
    if (value == null) {
      throw NullPointerException("value was null! Wrap in .nullSafe() to write nullable values.")
    }
    writer.beginObject()
    writer.name("artifactId")
    nullableArtifactIdAdapter.toJson(writer, value.artifactId)
    writer.name("copyrightHolder")
    nullableStringAdapter.toJson(writer, value.copyrightHolder)
    writer.name("copyrightStatement")
    nullableStringAdapter.toJson(writer, value.copyrightStatement)
    writer.name("license")
    nullableStringAdapter.toJson(writer, value.license)
    writer.name("licenseUrl")
    nullableStringAdapter.toJson(writer, value.licenseUrl)
    writer.name("normalizedLicense")
    nullableStringAdapter.toJson(writer, value.normalizedLicense)
    writer.name("url")
    nullableStringAdapter.toJson(writer, value.url)
    writer.name("libraryName")
    nullableStringAdapter.toJson(writer, value.libraryName)
    writer.endObject()
  }
}
